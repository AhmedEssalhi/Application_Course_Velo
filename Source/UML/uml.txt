@startuml
class Game {
    - Car player
    - Map road
    - std::vector<Obstacle> obstacles
    - GameState state
    - SoundManager soundManager
    
    + void run()
    + void handleEvents()
    + void update()
    + void render()
    + void changeState(GameState newState)
}

class Car {
    - sf::Texture texture
    - sf::Sprite sprite
    - float speed

    + Car(float x, float y, float moveSpeed)
    + void update()
    + void draw(sf::RenderWindow& window)
    + sf::FloatRect getBounds() const
}

class Obstacle {
    - sf::Texture texture
    - sf::Sprite sprite
    - float speed

    + Obstacle(float moveSpeed)
    + void update()
    + void draw(sf::RenderWindow& window)
    + sf::FloatRect getBounds() const
    + bool isOffScreen() const
    + bool checkCollision(const sf::FloatRect& playerBounds) const
}

class Map {
    - sf::Texture texture
    - sf::Sprite sprite1
    - sf::Sprite sprite2
    - float speed

    + Map(std::string texturePath, float scrollSpeed)
    + void update()
    + void draw(sf::RenderWindow& window)
}

enum GameState {
    MainMenu
    Playing
    Paused
    GameOver
    About
}

Game *-- Car : contains
Game *-- Map : contains
Game *-- "multiple" Obstacle : manages
Game o-- GameState : uses
@enduml
